/* Generated By:JavaCC: Do not edit this line. SQLCreateParser.java */
package com.mycompany.sql_dbms;
import java.util.List;
import java.util.ArrayList;
import java.io.FileOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
///import java.util.*;
import java.io.*;
import java.io.Serializable;

public class SQLCreateParser implements SQLCreateParserConstants {
    public static void main(String[] args) throws ParseException, IOException {
        SQLCreateParser parser = new SQLCreateParser(System.in);
        parser.parse();
    }

  static final public void parse() throws ParseException, ParseException, IOException {
    List<String> columns = new ArrayList<String>();
    String tableName;
    jj_consume_token(CREATE);
    jj_consume_token(TABLE);
    tableName = tableName();
    jj_consume_token(LPAREN);
    columns = columnList();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
        DataOutputStream sos = null;
        try {
            sos = new DataOutputStream(new FileOutputStream("output.bin"));
            sos.writeUTF("Table Name: " + tableName + "\n");
            sos.writeUTF("Columns:\n");
            for (String column : columns) {
                sos.writeUTF(column + "\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (sos != null) {
                try {
                    sos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        // Create metadata
                        // Create metadata
                              // Create metadata
                // Create metadata
                                Metadata metadata = new Metadata(tableName, columns);

                                // Serialize metadata and save to file
                                try {
                                    ObjectOutputStream dos = new ObjectOutputStream(new FileOutputStream("metadata.bin"));
                                    dos.writeObject(metadata);
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }

                                // Deserialize metadata from file
                                Metadata deserializedMetadata;
                                try {
                                    ObjectInputStream ois = new ObjectInputStream(new FileInputStream("metadata.bin"));
                                    deserializedMetadata = (Metadata) ois.readObject();
                                    System.out.println("Deserialized Metadata:");
                                    System.out.println("Table Name: " + deserializedMetadata.getTableName());
                                    System.out.println("Columns: " + deserializedMetadata.getColumns());
                                } catch ( ClassNotFoundException e) {
                                    e.printStackTrace();
                                }
  }

  static final public List<String> columnList() throws ParseException {
    List<String> columns = new ArrayList<String>();
    String columnName, type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      columnName = identifier();
      type = columnType();
                   columns.add(columnName + " " + type);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(COMMA);
        columnName = identifier();
        type = columnType();
                   columns.add(columnName + " " + type);
      }
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
        {if (true) return columns;}
    throw new Error("Missing return statement in function");
  }

  static final public String columnType() throws ParseException {
    Token sizeToken;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      jj_consume_token(LPAREN);
      sizeToken = jj_consume_token(NUMBER);
      jj_consume_token(RPAREN);
      {if (true) return "INT(" + sizeToken.image + ")";}
      break;
    case VARCHAR:
      jj_consume_token(VARCHAR);
      jj_consume_token(LPAREN);
      sizeToken = jj_consume_token(NUMBER);
      jj_consume_token(RPAREN);
      {if (true) return "VARCHAR(" + sizeToken.image + ")";}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String tableName() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
      {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String identifier() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
      {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SQLCreateParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0x8000,0x3000,};
   }

  /** Constructor with InputStream. */
  public SQLCreateParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SQLCreateParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SQLCreateParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SQLCreateParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SQLCreateParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SQLCreateParser(SQLCreateParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SQLCreateParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[16];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

class Metadata implements Serializable {
    private String tableName;
    private List<String> columns;

    public Metadata(String tableName, List<String> columns) {
        this.tableName = tableName;
        this.columns = columns;
    }

    public String getTableName() {
        return tableName;
    }

    public List<String> getColumns() {
        return columns;
    }

}
