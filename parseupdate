

    // Parses the UPDATE SQL command
    public String parseUpdate(String updateStatement) {
        try {
            String[] parts = updateStatement.split("SET");
            String tableName = extractTableName(parts[0].trim());
            String[] afterSet = parts[1].split("WHERE");
            String updatePortion = afterSet[0].trim();
            String wherePortion = afterSet.length > 1 ? afterSet[1].trim() : null;

            Map<String, String> columnValues = parseColumnValues(updatePortion);
            Table table = getTable(tableName);
            if (table == null) {
                return "Error: Table '" + tableName + "' does not exist.";
            }

            List<Record> recordsToUpdate = (wherePortion != null) ? filterRecords(table, wherePortion) : table.getRecords();
            updateRecords(recordsToUpdate, columnValues);
            table.storeTable();
            return "Update successful";
        } catch (Exception e) {
            return "Error processing the update statement: " + e.getMessage();
        }
    }



    // Extracts the table name from the part of the statement before 'SET'
    private String extractTableName(String part) {
        return part.replace("UPDATE", "").trim();
    }

    // Parses the column-value pairs from the update portion
    private Map<String, String> parseColumnValues(String updatePortion) {
        Map<String, String> columnValues = new HashMap<>();
        String[] pairs = updatePortion.split(",");
        for (String pair : pairs) {
            String[] keyValue = pair.split("=");
            columnValues.put(keyValue[0].trim(), keyValue[1].trim().replaceAll("'", ""));
        }
        return columnValues;
    }

//    // Filters records based on the WHERE clause
//    private List<Record> filterRecords(Table table, String whereCondition) {
//        List<Record> filteredRecords = new ArrayList<>();
//        // Simple implementation assuming condition is 'columnName = value'
//        String[] conditionParts = whereCondition.split("=");
//        String columnName = conditionParts[0].trim();
//        String value = conditionParts[1].trim().replaceAll("'", "");
//
//        int columnIndex = getColumnIndex(table, columnName);
//        for (Record record : table.getRecords()) {
//            if (record.values.get(columnIndex).toString().equals(value)) {
//                filteredRecords.add(record);
//            }
//        }
//        return filteredRecords;
//    }


    private List<Record> filterRecords(Table table, String whereCondition) {
        List<Record> filteredRecords = new ArrayList<>();
        // Parse the condition to extract column name, operator, and value
        Pattern pattern = Pattern.compile("(\\w+)\\s*(=|<|>|<>)\\s*(.*)");
        Matcher matcher = pattern.matcher(whereCondition);
        if (!matcher.find()) {
            throw new IllegalArgumentException("Invalid WHERE clause format.");
        }
        String columnName = matcher.group(1);
        String operator = matcher.group(2);
        String value = matcher.group(3).replaceAll("'", "").trim();

        int columnIndex = getColumnIndex(table, columnName);
        if (columnIndex == -1) {
            throw new IllegalArgumentException("Column not found: " + columnName);
        }

        for (Record record : table.getRecords()) {
            Object recordValue = record.values.get(columnIndex);
            if (compare(recordValue, operator, value)) {
                filteredRecords.add(record);
            }
        }
        return filteredRecords;
    }


    private boolean compare(Object recordValue, String operator, String value) {
        switch (operator) {
            case "=":
                return recordValue.toString().equals(value);
            case "<":
                return Double.compare(Double.parseDouble(recordValue.toString()), Double.parseDouble(value)) < 0;
            case ">":
                return Double.compare(Double.parseDouble(recordValue.toString()), Double.parseDouble(value)) > 0;
            case "<>":
                return !recordValue.toString().equals(value);
            default:
                throw new IllegalArgumentException("Unsupported operator: " + operator);
        }
    }


    // Updates records with new column values
    private void updateRecords(List<Record> records, Map<String, String> columnValues) {
        for (Record record : records) {
            for (Map.Entry<String, String> entry : columnValues.entrySet()) {
                Table table = null;
                int columnIndex = getColumnIndex(table, entry.getKey());
                if (columnIndex != -1) {
                    record.values.set(columnIndex, entry.getValue());
                }
            }
        }
    }

    // Helper method to find a column index by name
    private int getColumnIndex(Table table, String columnName) {
        for (int i = 0; i < table.columns.size(); i++) {
            if (table.columns.get(i).columnName.equalsIgnoreCase(columnName)) {
                return i;
            }
        }
        return -1;
    }
